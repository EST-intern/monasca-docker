version: '2'
services:

  memcached:
    hostname: docker-host
    image: memcached:${MEMCACHED_VERSION}
    environment:
      LOGSTASH_FIELDS: "service=memcached"

  influxdb:
    hostname: docker-host
    image: influxdb:${INFLUXDB_VERSION}
    environment:
      INFLUXDB_DATA_QUERY_LOG_ENABLED: "false"
      INFLUXDB_HTTP_LOG_ENABLED: "false"
      LOGSTASH_FIELDS: "service=influxdb"
    volumes:
    - "${MON_DOCKER_VOL_ROOT}/influxdb:/var/lib/influxdb:rw"
    - "${MON_BACKUP_DIR}/influxdb_backup:/influxdb_backup:rw"
  influxdb-init:
    hostname: docker-host
    image: fest/influxdb-init:${INFLUXDB_INIT_VERSION}
    environment:
      INFLUXDB_DEFAULT_RETENTION: ${MON_INFLUXDB_RETENTION}
      LOGSTASH_FIELDS: "service=influxdb-init"
    depends_on:
      - influxdb

  # cadvisor will allow host metrics to be collected, but requires significant
  # access to the host system
  # if this is not desired, the following can be commented out, and the CADVISOR
  # environment variable should be set to "false" in the `agent-collector`
  # block - however no metrics will be collected
  cadvisor:
    hostname: docker-host
    image: google/cadvisor:${CADVISOR_VERSION}
    environment:
      LOGSTASH_FIELDS: "service=cadvisor"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker:/var/lib/docker:ro"

  agent-forwarder:
    hostname: docker-host
    image: fest/agent-forwarder:${MON_AGENT_FORWARDER_VERSION}
    environment:
      NON_LOCAL_TRAFFIC: "true"
      LOGSTASH_FIELDS: "service=monasca-agent-forwarder"
    depends_on:
      - monasca

  agent-collector:
    hostname: docker-host
    image: fest/agent-collector:${MON_AGENT_COLLECTOR_VERSION}
    restart: on-failure
    environment:
      AGENT_HOSTNAME: "docker-host"
      FORWARDER_URL: "http://agent-forwarder:17123"
      CADVISOR: "true"
      CADVISOR_URL: "http://cadvisor:8080/"
      LOGSTASH_FIELDS: "service=monasca-agent-collector"
    depends_on:
      - agent-forwarder

  zookeeper:
    hostname: docker-host
    image: zookeeper:${ZOOKEEPER_VERSION}
    environment:
      LOGSTASH_FIELDS: "service=zookeeper"
    restart: on-failure

  kafka:
    hostname: docker-host
    image: fest/kafka:${MON_KAFKA_VERSION}
    environment:
      LOGSTASH_FIELDS: "service=kafka"
    volumes:
    - "${MON_DOCKER_VOL_ROOT}/kafka:/data:rw"
    restart: on-failure
    depends_on:
      - zookeeper
  kafka-init:
    hostname: docker-host
    image: fest/kafka-init:${MON_KAFKA_INIT_VERSION}
    environment:
      ZOOKEEPER_CONNECTION_STRING: "zookeeper:2181"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_TOPIC_CONFIG: segment.ms=900000 # 15m
      KAFKA_CREATE_TOPICS: "\
        metrics:64:1,\
        alarm-state-transitions:12:1,\
        alarm-notifications:12:1,\
        retry-notifications:3:1,\
        events:12:1,\
        60-seconds-notifications:3:1"
      LOGSTASH_FIELDS: "service=kafka-init"
    depends_on:
      - zookeeper
      - kafka

  mysql:
    hostname: docker-host
    image: mysql:${MYSQL_VERSION}
    environment:
      MYSQL_ROOT_PASSWORD: secretmysql
      LOGSTASH_FIELDS: "service=mysql"
    volumes:
    - "${MON_DOCKER_VOL_ROOT}/mysql:/var/lib/mysql:rw"
    - "${MON_BACKUP_DIR}/mysql_backup:/mysql_backup:rw"
  mysql-init:
    hostname: docker-host
    image: fest/mysql-init:${MYSQL_INIT_VERSION}
    environment:
      MYSQL_INIT_DISABLE_REMOTE_ROOT: "false"
      MYSQL_INIT_RANDOM_PASSWORD: "false"
      LOGSTASH_FIELDS: "service=mysql-init"
    depends_on:
      - mysql

  keystone:
    image: fest/keystone:${MON_KEYSTONE_VERSION}
    environment:
      KEYSTONE_HOST: keystone
      KEYSTONE_PASSWORD: secretadmin
      KEYSTONE_DATABASE_BACKEND: mysql
      KEYSTONE_MYSQL_HOST: mysql
      KEYSTONE_MYSQL_USER: keystone
      KEYSTONE_MYSQL_PASSWORD: keystone
      KEYSTONE_MYSQL_DATABASE: keystone
      LOGSTASH_FIELDS: "service=keystone"
    depends_on:
      - mysql
    ports:
      - "5000:5000"
      - "35357:35357"

  monasca:
    hostname: docker-host
    image: fest/api:${MON_API_VERSION}
    environment:
      LOGSTASH_FIELDS: "service=monasca-api"
    depends_on:
      - influxdb
      - keystone
      - mysql
      - zookeeper
      - kafka
      - memcached
    ports:
      - "8070:8070"

  monasca-persister:
    hostname: docker-host
    image: fest/persister:${MON_PERSISTER_VERSION}
    environment:
      LOGSTASH_FIELDS: "service=monasca-persister"
    restart: on-failure
    depends_on:
      - monasca
      - influxdb
      - zookeeper
      - kafka

  thresh:
    hostname: docker-host
    image: fest/thresh:${MON_THRESH_VERSION}
    environment:
      NO_STORM_CLUSTER: "true"
      WORKER_MAX_HEAP_MB: "256"
      LOGSTASH_FIELDS: "service=monasca-thresh"
    depends_on:
      - zookeeper
      - kafka

  monasca-notification:
    hostname: docker-host
    image: fest/notification:${MON_NOTIFICATION_VERSION}
    environment:
      NF_PLUGINS: "webhook"
      LOGSTASH_FIELDS: "service=monasca-notification"
    depends_on:
      - monasca
      - zookeeper
      - kafka
      - mysql

  grafana:
    hostname: docker-host
    image: fest/grafana:${MON_GRAFANA_VERSION}
    environment:
      GF_AUTH_BASIC_ENABLED: "false"
      GF_USERS_ALLOW_SIGN_UP: "true"
      GF_USERS_ALLOW_ORG_CREATE: "true"
      GF_AUTH_KEYSTONE_ENABLED: "true"
      GF_AUTH_KEYSTONE_AUTH_URL: http://keystone:5000
      GF_AUTH_KEYSTONE_VERIFY_SSL_CERT: "false"
      GF_AUTH_KEYSTONE_DEFAULT_DOMAIN: "Default"
      LOGSTASH_FIELDS: "service=grafana"
    volumes:
    - "${MON_DOCKER_VOL_ROOT}/grafana/data:/var/lib/grafana/data:rw"
    ports:
      - "3000:3000"
    depends_on:
      - keystone
      - monasca

  grafana-init:
    hostname: docker-host
    image: fest/grafana-init:${MON_GRAFANA_INIT_VERSION}
    environment:
      LOGSTASH_FIELDS: "service=grafana-init"
    depends_on:
      - grafana
