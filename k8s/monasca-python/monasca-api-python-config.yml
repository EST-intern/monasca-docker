apiVersion: v1
kind: ConfigMap
metadata:
  namespace: monitoring
  name: monasca-api-python-config
data:
  api-config.ini: |
    [DEFAULT]
    name = monasca_api
    
    [pipeline:main]
    # Add validator in the pipeline so the metrics messages can be validated.
    pipeline = auth keystonecontext api
    
    [app:api]
    paste.app_factory = monasca_api.api.server:launch

    [filter:auth]
    paste.filter_factory = keystonemiddleware.auth_token:filter_factory
    
    [filter:keystonecontext]
    paste.filter_factory = monasca_api.middleware.keystone_context_filter:filter_factory
    
    [server:main]
    use = egg:gunicorn#main
    host = 0.0.0.0
    port = 8070
    workers = 1
    proc_name = monasca_api
  api-config.conf: |
    [DEFAULT]
    log_config_append=/etc/monasca/api-logging.conf
    
    # Identifies the region that the Monasca API is running in.
    region = useast
    
    # Dispatchers to be loaded to serve restful APIs
    [dispatcher]
    versions = monasca_api.v2.reference.versions:Versions
    version_2_0 = monasca_api.v2.reference.version_2_0:Version2
    metrics = monasca_api.v2.reference.metrics:Metrics
    metrics_measurements = monasca_api.v2.reference.metrics:MetricsMeasurements
    metrics_statistics = monasca_api.v2.reference.metrics:MetricsStatistics
    metrics_names = monasca_api.v2.reference.metrics:MetricsNames
    alarm_definitions = monasca_api.v2.reference.alarm_definitions:AlarmDefinitions
    alarms = monasca_api.v2.reference.alarms:Alarms
    alarms_count = monasca_api.v2.reference.alarms:AlarmsCount
    alarms_state_history = monasca_api.v2.reference.alarms:AlarmsStateHistory
    notification_methods = monasca_api.v2.reference.notifications:Notifications
    dimension_values = monasca_api.v2.reference.metrics:DimensionValues
    dimension_names = monasca_api.v2.reference.metrics:DimensionNames
    notification_method_types = monasca_api.v2.reference.notificationstype:NotificationsType
    
    [security]
    # The roles that are allowed full access to the API.
    default_authorized_roles = user, domainuser, domainadmin, monasca-user
    
    # The roles that are allowed to only POST metrics to the API. This role would be used by the Monasca Agent.
    agent_authorized_roles = monasca-agent
    
    # The roles that are allowed to only GET metrics from the API.
    read_only_authorized_roles = monasca-read-only-user
    
    # The roles that are allowed to access the API on behalf of another tenant.
    # For example, a service can POST metrics to another tenant if they are a member of the "delegate" role.
    delegate_authorized_roles = admin
    
    [messaging]
    # The message queue driver to use
    driver = monasca_api.common.messaging.kafka_publisher:KafkaPublisher
    
    [repositories]
    # The driver to use for the metrics repository
    # Switches depending on backend database in use. Influxdb or Cassandra.
    metrics_driver = monasca_api.common.repositories.influxdb.metrics_repository:MetricsRepository
    #metrics_driver = monasca_api.common.repositories.cassandra.metrics_repository:MetricsRepository
    
    # The driver to use for the alarm definitions repository
    alarm_definitions_driver = monasca_api.common.repositories.sqla.alarm_definitions_repository:AlarmDefinitionsRepository
    
    # The driver to use for the alarms repository
    alarms_driver = monasca_api.common.repositories.sqla.alarms_repository:AlarmsRepository
    
    # The driver to use for the notifications repository
    notifications_driver = monasca_api.common.repositories.sqla.notifications_repository:NotificationsRepository
    
    # The driver to use for the notification  method type repository
    notification_method_type_driver = monasca_api.common.repositories.sqla.notification_method_type_repository:NotificationMethodTypeRepository
    
    
    [dispatcher]
    driver = v2_reference
    
    [kafka]
    # The endpoint to the kafka server
    uri = kafka:9092
    
    # The topic that metrics will be published too
    metrics_topic = metrics
    
    # consumer group name
    group = api
    
    # how many times to try when error occurs
    max_retry = 1
    
    # wait time between tries when kafka goes down
    wait_time = 1
    
    # use synchronous or asynchronous connection to kafka
    async = False
    
    # send messages in bulk or send messages one by one.
    compact = False
    
    # How many partitions this connection should listen messages on, this
    # parameter is for reading from kafka. If listens on multiple partitions,
    # For example, if the client should listen on partitions 1 and 3, then the
    # configuration should look like the following:
    #   partitions = 1
    #   partitions = 3
    # default to listen on partition 0.
    partitions = 0
    
    [influxdb]
    # Only needed if Influxdb database is used for backend.
    # The IP address of the InfluxDB service.
    ip_address = influxdb
    
    # The port number that the InfluxDB service is listening on.
    port = 8086
    
    # The username to authenticate with.
    user = mon_api
    
    # The password to authenticate with.
    password = password
    
    # The name of the InfluxDB database to use.
    database_name = mon
    
    [cassandra]
    # Only needed if Cassandra database is used for backend.
    # Comma separated list of Cassandra node IP addresses. No spaces.
    cluster_ip_addresses: 127.0.0.1
    keyspace: monasca
    
    [database]
    url = "mysql+pymysql://monapi:password@mysql/mon"
    
    # [mysql]
    # database_name = mon
    # hostname = 127.0.0.1
    # username = monapi
    # password = password
    
    [keystone_authtoken]
    identity_uri = http://keystone:35357
    auth_uri = http://keystone:5000
    admin_password = secretadmin
    admin_user = admin
    admin_tenant_name = admin
    cafile =
    certfile =
    keyfile =
    insecure = false
  api-logging.conf: |
    [loggers]
    keys = root, sqlalchemy, kafka
    
    [handlers]
    keys = console
    
    [formatters]
    keys = generic
    
    [logger_root]
    level = WARN
    formatter = default
    handlers = console
    
    [logger_sqlalchemy]
    qualname = sqlalchemy.engine
    # "level = INFO" logs SQL queries.
    # "level = DEBUG" logs SQL queries and results.
    # "level = WARN" logs neither.  (Recommended for production systems.)
    level = WARN
    formatter = default
    handlers = console
    propagate=0
    
    [logger_kafka]
    qualname = kafka
    level = WARN
    formatter = default
    handlers = console
    propagate = 0
    
    [handler_console]
    class = logging.StreamHandler
    args = (sys.stderr,)
    level = WARN
    formatter = generic
    
    [formatter_generic]
    format = %(asctime)s %(levelname)s [%(name)s][%(threadName)s] %(message)s
